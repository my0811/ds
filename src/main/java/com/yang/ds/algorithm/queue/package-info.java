/**
 * 队列，操作在一端的操作的线性表
 * I.FIFO,先入先出,队尾插入，队头删除
 * II 队列分类
 * 1. 单向队列,一端插入，另一端删除
 * 2. 双向队列，在每一段都可以插入、删除
 * 3. 优先级队列
 * II. 双端队列
 * 1. 双端队列比较灵活，两端都可以添加和删除
 * 2. 其中每一端都相当于一个栈FILO
 * 3. 双端队列既可以当栈结构用，值用一端，也可以当队列用,addFirst,removeLast(一端添加，一端删除)
 * <p>
 * 总结：
 * 队列重要有三种形式的队列
 * 1.单向队列,最基本的队列模型，一端添加，另一端删除
 * 2.双端队列，可以当做栈来使用，也可以实现单向队列,双向队列两端都可以添加和删除
 * 3.优先级队列,优先级队列主要是是在插入的时候进行了排序，所以插入元素都是O(N)就是有序数组的插入，一般使用优先堆来实现，提升插入的效率
 * 4.循环队列，一般循环队列是指用数组实现的，数组是定长的，为了不让数组扩容可以采用循环数组的方式来实现,因为对于队列来说，一端插入数据，一端
 * 删除数据，所以数组没有满的情况下可以循环到另一端继续插入和删除
 * 数据结构：
 * 1.栈、队列（单向队列）、优先级队列通常是用来简化默写程序操作的数据结构，而不是用来存储数据用的
 * 2.在这些数据结构中只有一个元素能被访问,如栈顶元素，或者队头，对尾元素
 * 3.双端队列是一个循环队列，使用到了数组的循环，可以多考虑考虑算法的实现
 * 4.优先级队列每次返回的都是排序最大，或者最小的元素，入队是有序的
 * 5.栈的话，只能操作栈顶元素 LIFO 后进先出的结构,队列是FIFO先进先出
 *
 * 重点提示:
 * 6.队列可以用链表实现也可以用数组实现，如果实现阻塞队列，队列满了需要阻塞，建议使用arrayQ，因为占用内存更少，linkedQ更适合不限制队列大小
 * 可以无限增加的没有边界的队列，但是我们程序设计一般不会使用无边界的，因为内存的空间不容易控制，很可能OOM
 */
package com.yang.ds.algorithm.queue;